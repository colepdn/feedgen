DONE fucking databases. 
	use kysely, that's what they use in the bsky feedgen
	https://www.kysely.dev/	
	in feed-generator see db/index.ts and db/schema.ts
	schemas for posts only include bare minimum for feed skeleton generation
	include date created perhaps (i think indexedAt covers that, actually) as well as if the post contains media, and the author's did
	then we can get all posts from the author after a certain timestamp and then just count the list to get their frequency.
	and for the media feed we can just return posts that have media!
	we should probably also include an item for if the media has been marked nsfw
DONE fix the bug where reposts from a user's feed will show up in the feed.
	noticed this happening when aviva.gay had reposted something and it showed up (uncredited lmao)
	when iterating an author feed we can check if the post author has the same did
	i just wasn't actually skipping it, i was executing the check
DONE implement the cron script
DONE implement multiple feeds handling. we return the same feed for every endpoint

TODO implement .well-known
	it is currently hard-coded
	maybe just read from .env lol
TODO implement error handling
	the format is {"error":"UnsupportedAlgorithm","message":"Unsupported algorithm"}
TODO cleanup posts
	TODO just delete old posts
	TODO delete old posts, but keep at least n posts from a user's feed.
		use the usersFor column to get this feed
		TODO add function to calculate a feed to get the nth item's uri
			TODO implement common code for feedgen.
				for every feed we need to get the user's did from the jwt and convert the PostsTable posts to at-uris.
				let's just make this common code that is executed for EVERY feed.
			TODO change format of returned algos from { feed: string[] cursor: string } of uris to the returned db response. 
				here, we can re-use this in places that aren't just feedgen.
			TODO use new function to calculate 200 posts, then delete posts older than post 201. 
				calc for all feeds and then delete oldest post out of EVERY feed. this requires feed files to be standardized. (duh)
			TODO how do we deal with posts that have been collected for multiple users?

TODO see if it's feasible to generate feeds on-demand.
	TODO cache following? that's probably not fast enough
	TODO fetch posts from users who've posted today. cron script when we constrain to only 10 users is almost instantaneous.
	TODO simultaneous author feed fetching. change for loop from executing instantly to generating promises, and then await Promise.all()'ing them.

TODO make topten feed calculation more accurate
	currently we have some real issues.
	i refuse to believe Hideo Kojima is my #1 poaster.
	this is probably because we don't have ALL the posts the user has made in the past week.
	I think there's a hard limit - since we only fetch one author feed.
	so things just get jumbled up.
	how does this intersect with garbage-collection?
	for this feed to work, do we really need to fetch the author feed for the entire week?
		currently the db is small (2.6MB at 1st cron.ts run) - we don't really need to introduce cost-cutting measures
		though if we do, our previous garbage-collection methodology goes out the window. we need a lot more posts to calculate this feed than the media feed.
		maybe i can change from 'posts this week' to 'posts this day'

TODO Write the fucking unit files!	
TODO new feed - bangers from people you follow that you didn't like
	bpyftydl - incredible name.
	get some posts that were good and you didn't like
	like a certain amount of likes
	or calculate if the likes are more than what the author usually gets
	TODO dependent on aforementioned preflight calculations

TODO FIX getting authors 
	currently we get EVERYONE's authors. this Breaks when we have more than one user!
	This should be okay, we already have the UsersFor category, and for certain posts that should be fine cause like if we got a new user some posts aren't gonna have their did but if the other dude is following the did is gonna be in the list on at least another post so we'll be fine
	but i don't want to verify all of this right now cause it's 12:38am
	we can just add .where usersFor.includes(did)	
